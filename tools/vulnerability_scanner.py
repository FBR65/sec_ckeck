import asyncio
import socket
from typing import List, Dict, Any
from datetime import datetime

from models.security_models import Vulnerability, SeverityLevel


class VulnerabilityScanner:
    def __init__(self):
        self.nm = None
        self.use_nmap = self._check_nmap_availability()
        if not self.use_nmap:
            print("Warning: nmap not found. Using basic socket scanning instead.")

    def _check_nmap_availability(self) -> bool:
        """Check if nmap is available."""
        try:
            import nmap

            self.nm = nmap.PortScanner()
            return True
        except ImportError:
            print("Warning: python-nmap package not installed")
            return False
        except Exception as e:
            print(f"Warning: nmap not available: {e}")
            return False

    async def scan(
        self, target: str, scan_type: str = "comprehensive"
    ) -> List[Vulnerability]:
        """Perform vulnerability scan on target."""
        vulnerabilities = []

        try:
            # Port scan
            if self.use_nmap:
                port_scan_results = await self._nmap_port_scan(target)
            else:
                port_scan_results = await self._socket_port_scan(target)

            vulnerabilities.extend(port_scan_results)

            # Service detection
            service_vulns = await self._service_vulnerability_scan(target)
            vulnerabilities.extend(service_vulns)

            # SSL/TLS assessment
            if scan_type == "comprehensive":
                ssl_vulns = await self._ssl_scan(target)
                vulnerabilities.extend(ssl_vulns)

        except Exception as e:
            # Create vulnerability for scan failure
            vulnerabilities.append(
                Vulnerability(
                    id=f"SCAN_ERROR_{datetime.now().timestamp()}",
                    title="Scan Error",
                    description=f"Failed to complete scan: {str(e)}",
                    severity=SeverityLevel.INFO,
                    target_host=target,
                )
            )

        return vulnerabilities

    async def _nmap_port_scan(self, target: str) -> List[Vulnerability]:
        """Perform nmap port scanning."""
        vulnerabilities = []

        # Common ports to scan
        ports = "22,23,25,53,80,110,143,443,993,995,1433,3306,3389,5432,6379"

        try:
            scan_result = self.nm.scan(target, ports, arguments="-sV -sC")

            for host in scan_result["scan"]:
                for port in scan_result["scan"][host]["tcp"]:
                    port_info = scan_result["scan"][host]["tcp"][port]

                    if port_info["state"] == "open":
                        # Check for potentially dangerous open ports
                        severity = self._assess_port_risk(
                            port, port_info.get("name", "")
                        )

                        if severity != SeverityLevel.INFO:
                            vulnerabilities.append(
                                Vulnerability(
                                    id=f"OPEN_PORT_{host}_{port}",
                                    title=f"Open Port: {port}",
                                    description=f"Port {port} ({port_info.get('name', 'unknown')}) is open on {host}",
                                    severity=severity,
                                    target_host=host,
                                    target_port=port,
                                    service=port_info.get("name", "unknown"),
                                )
                            )

        except Exception as e:
            print(f"Nmap scan error: {e}")

        return vulnerabilities

    async def _socket_port_scan(self, target: str) -> List[Vulnerability]:
        """Perform basic socket port scanning."""
        vulnerabilities = []

        # Common ports to scan
        common_ports = [
            21,
            22,
            23,
            25,
            53,
            80,
            110,
            143,
            443,
            993,
            995,
            1433,
            3306,
            3389,
            5432,
            6379,
            8080,
            8081,
            8082,
            8083,
        ]

        print(f"Scanning {target} for open ports...")

        for port in common_ports:
            try:
                if await self._is_port_open(target, port):
                    service = self._guess_service_by_port(port)
                    severity = self._assess_port_risk(port, service)

                    vulnerabilities.append(
                        Vulnerability(
                            id=f"OPEN_PORT_{target}_{port}",
                            title=f"Open Port: {port}",
                            description=f"Port {port} ({service}) is open on {target}",
                            severity=severity,
                            target_host=target,
                            target_port=port,
                            service=service,
                        )
                    )
                    print(f"  Found open port: {port} ({service})")

            except Exception as e:
                print(f"Error scanning port {port}: {e}")

        return vulnerabilities

    def _guess_service_by_port(self, port: int) -> str:
        """Guess service by port number."""
        port_services = {
            21: "ftp",
            22: "ssh",
            23: "telnet",
            25: "smtp",
            53: "dns",
            80: "http",
            110: "pop3",
            143: "imap",
            443: "https",
            993: "imaps",
            995: "pop3s",
            1433: "mssql",
            3306: "mysql",
            3389: "rdp",
            5432: "postgresql",
            6379: "redis",
            8080: "http-alt",
            8081: "http-alt",
            8082: "http-alt",
            8083: "http-alt",
        }
        return port_services.get(port, "unknown")

    async def _service_vulnerability_scan(self, target: str) -> List[Vulnerability]:
        """Scan for service-specific vulnerabilities."""
        vulnerabilities = []

        # This would integrate with various service-specific scanners
        # For now, we'll implement basic checks

        common_services = {
            22: self._check_ssh_vulns,
            80: self._check_http_vulns,
            443: self._check_https_vulns,
            3389: self._check_rdp_vulns,
        }

        for port, check_func in common_services.items():
            if await self._is_port_open(target, port):
                vulns = await check_func(target, port)
                vulnerabilities.extend(vulns)

        return vulnerabilities

    async def _ssl_scan(self, target: str) -> List[Vulnerability]:
        """Perform SSL/TLS vulnerability assessment."""
        vulnerabilities = []

        # Check common HTTPS ports
        ssl_ports = [443, 8443, 9443]

        for port in ssl_ports:
            if await self._is_port_open(target, port):
                # Basic SSL checks (in production, use specialized tools like testssl.sh)
                vulnerabilities.append(
                    Vulnerability(
                        id=f"SSL_CHECK_{target}_{port}",
                        title=f"SSL/TLS Configuration Review Required",
                        description=f"SSL/TLS service detected on port {port}. Manual review recommended for certificate validity, cipher suites, and protocol versions.",
                        severity=SeverityLevel.LOW,
                        target_host=target,
                        target_port=port,
                        service="ssl/tls",
                    )
                )

        return vulnerabilities

    def _assess_port_risk(self, port: int, service: str) -> SeverityLevel:
        """Assess risk level of open port."""
        high_risk_ports = [23, 135, 139, 445, 1433, 3389]  # Telnet, RPC, SMB, SQL, RDP
        medium_risk_ports = [21, 25, 110, 143, 993, 995]  # FTP, SMTP, POP3, IMAP

        if port in high_risk_ports:
            return SeverityLevel.HIGH
        elif port in medium_risk_ports:
            return SeverityLevel.MEDIUM
        elif port in [22, 80, 443]:  # SSH, HTTP, HTTPS
            return SeverityLevel.LOW

        return SeverityLevel.INFO

    async def _is_port_open(self, host: str, port: int) -> bool:
        """Check if port is open."""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((host, port))
            sock.close()
            return result == 0
        except:
            return False

    async def _check_ssh_vulns(self, target: str, port: int) -> List[Vulnerability]:
        """Check SSH-specific vulnerabilities."""
        return [
            Vulnerability(
                id=f"SSH_CONFIG_{target}_{port}",
                title="SSH Configuration Review",
                description="SSH service detected. Verify secure configuration (key-based auth, disabled root login, etc.)",
                severity=SeverityLevel.MEDIUM,
                target_host=target,
                target_port=port,
                service="ssh",
            )
        ]

    async def _check_http_vulns(self, target: str, port: int) -> List[Vulnerability]:
        """Check HTTP-specific vulnerabilities."""
        return [
            Vulnerability(
                id=f"HTTP_INSECURE_{target}_{port}",
                title="Insecure HTTP Service",
                description="HTTP service without encryption detected. Consider migrating to HTTPS.",
                severity=SeverityLevel.MEDIUM,
                target_host=target,
                target_port=port,
                service="http",
            )
        ]

    async def _check_https_vulns(self, target: str, port: int) -> List[Vulnerability]:
        """Check HTTPS-specific vulnerabilities."""
        return [
            Vulnerability(
                id=f"HTTPS_CONFIG_{target}_{port}",
                title="HTTPS Configuration Review",
                description="HTTPS service detected. Verify SSL/TLS configuration and certificate validity.",
                severity=SeverityLevel.LOW,
                target_host=target,
                target_port=port,
                service="https",
            )
        ]

    async def _check_rdp_vulns(self, target: str, port: int) -> List[Vulnerability]:
        """Check RDP-specific vulnerabilities."""
        return [
            Vulnerability(
                id=f"RDP_EXPOSED_{target}_{port}",
                title="Exposed RDP Service",
                description="RDP service exposed to network. High risk of brute force attacks.",
                severity=SeverityLevel.HIGH,
                target_host=target,
                target_port=port,
                service="rdp",
            )
        ]
